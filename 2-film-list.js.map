{"version":3,"file":"2-film-list.js","sources":["../src/js/2-film-list.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst END_POINT = '/trending/movie/week';\nconst API_KEY = '345007f9ab440e5b86cef51be6397df1';\n\n// const container = document.querySelector('.js-movie-list ');\n// const loadMore = document.querySelector('.js-load-more');\n\n// loadMore.addEventListener('click', onLoadMore);\n\n// let page = 1;\n\n// async function serviceMovie(page = 1) {\n//   const { data } = await axios(`${BASE_URL}${END_POINT}`, {\n//     params: {\n//       api_key: API_KEY,\n//       page,\n//     },\n//   });\n\n//   return data;\n// }\n\n// serviceMovie(page)\n//   .then(data => {\n//     container.insertAdjacentHTML('beforeend', createMarkup(data.results));\n\n//     if (data.page < data.total_pages) {\n//       loadMore.classList.replace('load-more-hidden', 'load-more');\n//     }\n//   })\n//   .catch(error => alert(error.message));\n\n// function createMarkup(arr) {\n//   return arr\n//     .map(\n//       ({ poster_path, release_date, original_title, vote_average }) => `\n//     <li class=\"movie-card\">\n//        <img src=\"https://image.tmdb.org/t/p/w300${poster_path}\" alt=\"${original_title}\">\n//        <div class=\"movie-info\">\n//           <h2>${original_title}</h2>\n//           <p>Release Date: ${release_date}</p>\n//           <p>Vote Average: ${vote_average}</p>\n//        </div>\n//        </li>\n//     `\n//     )\n//     .join('');\n// }\n\n// async function onLoadMore() {\n//   page += 1;\n//   loadMore.disabled = true;\n\n//   try {\n//     const data = await serviceMovie(page);\n//     container.insertAdjacentHTML('beforeend', createMarkup(data.results));\n\n//     if (data.page >= data.total_pages) {\n//       loadMore.classList.replace('load-more', 'load-more-hidden');\n//     }\n\n//     const card = document.querySelector('.movie-card');\n//     const cardHeight = card.getBoundingClientRect().height;\n\n//     window.scrollBy({\n//       left: 0,\n//       top: cardHeight,\n//       behavior: 'smooth',\n//     });\n//   } catch (error) {\n//     alert(error.message);\n//   } finally {\n//     loadMore.disabled = false;\n//   }\n// }\n\n// ----------------------------------- //\n// ----------------------------------- //\n\nconst container = document.querySelector('.js-movie-list');\nconst guard = document.querySelector('.js-guard');\n\nconst options = {\n  root: null,\n  rootMargin: '300px',\n  threshold: 0,\n};\n\nconst observer = new IntersectionObserver(handlePagination, options);\n\nlet page = 1;\n\nasync function serviceMovie(page = 1) {\n  const { data } = await axios(`${BASE_URL}${END_POINT}`, {\n    params: {\n      api_key: API_KEY,\n      page,\n    },\n  });\n\n  return data;\n}\n\nfunction createMarkup(arr) {\n  return arr\n    .map(\n      ({ poster_path, release_date, original_title, vote_average }) => `\n        <li class=\"movie-card\">\n            <img src=\"https://image.tmdb.org/t/p/w300${poster_path}\" alt=\"${original_title}\">\n            <div class=\"movie-info\">\n                <h2>${original_title}</h2>\n                <p>Release Date: ${release_date}</p>\n                <p>Vote Average: ${vote_average}</p>\n            </div>\n        </li>\n    `\n    )\n    .join('');\n}\n\nserviceMovie()\n  .then(data => {\n    container.insertAdjacentHTML('beforeend', createMarkup(data.results));\n\n    if (data.page < data.total_pages) {\n      observer.observe(guard);\n    }\n  })\n  .catch(error => alert(error.message));\n\nfunction handlePagination(entries, observer) {\n  entries.forEach(async entry => {\n    if (entry.isIntersecting) {\n      page += 1;\n\n      try {\n        const data = await serviceMovie(page);\n        container.insertAdjacentHTML('beforeend', createMarkup(data.results));\n\n        if (data.page >= data.total_pages) {\n          observer.unobserve(entry.target);\n        }\n      } catch (error) {\n        alert(error.message);\n      }\n    }\n  });\n}\n"],"names":["BASE_URL","END_POINT","API_KEY","container","guard","options","observer","handlePagination","page","serviceMovie","data","axios","createMarkup","arr","poster_path","release_date","original_title","vote_average","error","entries","entry"],"mappings":"wIAEA,MAAMA,EAAW,+BACXC,EAAY,uBACZC,EAAU,mCA6EVC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAQ,SAAS,cAAc,WAAW,EAE1CC,EAAU,CACd,KAAM,KACN,WAAY,QACZ,UAAW,CACb,EAEMC,EAAW,IAAI,qBAAqBC,EAAkBF,CAAO,EAEnE,IAAIG,EAAO,EAEX,eAAeC,EAAaD,EAAO,EAAG,CACpC,KAAM,CAAE,KAAAE,CAAM,EAAG,MAAMC,EAAM,GAAGX,CAAQ,GAAGC,CAAS,GAAI,CACtD,OAAQ,CACN,QAASC,EACT,KAAAM,CACD,CACL,CAAG,EAED,OAAOE,CACT,CAEA,SAASE,EAAaC,EAAK,CACzB,OAAOA,EACJ,IACC,CAAC,CAAE,YAAAC,EAAa,aAAAC,EAAc,eAAAC,EAAgB,aAAAC,CAAc,IAAK;AAAA;AAAA,uDAEhBH,CAAW,UAAUE,CAAc;AAAA;AAAA,sBAEpEA,CAAc;AAAA,mCACDD,CAAY;AAAA,mCACZE,CAAY;AAAA;AAAA;AAAA,KAI1C,EACA,KAAK,EAAE,CACZ,CAEAR,EAAc,EACX,KAAKC,GAAQ,CACZP,EAAU,mBAAmB,YAAaS,EAAaF,EAAK,OAAO,CAAC,EAEhEA,EAAK,KAAOA,EAAK,aACnBJ,EAAS,QAAQF,CAAK,CAE5B,CAAG,EACA,MAAMc,GAAS,MAAMA,EAAM,OAAO,CAAC,EAEtC,SAASX,EAAiBY,EAASb,EAAU,CAC3Ca,EAAQ,QAAQ,MAAMC,GAAS,CAC7B,GAAIA,EAAM,eAAgB,CACxBZ,GAAQ,EAER,GAAI,CACF,MAAME,EAAO,MAAMD,EAAaD,CAAI,EACpCL,EAAU,mBAAmB,YAAaS,EAAaF,EAAK,OAAO,CAAC,EAEhEA,EAAK,MAAQA,EAAK,aACpBJ,EAAS,UAAUc,EAAM,MAAM,CAElC,OAAQF,EAAO,CACd,MAAMA,EAAM,OAAO,CACpB,CACF,CACL,CAAG,CACH"}